<!-- Find professionals header -->
<div class="banner-short" style="background-image: linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url(https://images.unsplash.com/photo-1528901166007-3784c7dd3653?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80)">
  <h2 class="card-title"><%= @lecture.name %></h2>
</div>

<!-- VIDEO -->
<div id="remote-media"></div>
<div id="controls">
  <div id="preview">
    <p class="instructions">Hello Beautiful</p>
    <div id="local-media"></div>
    <button id="button-preview">Preview My Camera</button>
  </div>
  <div id="room-controls">
    <p class="instructions">Room Name:</p>
    <input id="room-name" type="text" placeholder="Enter a room name" />
    <button id="button-join">Join Room</button>
    <button id="button-leave">Leave Room</button>
  </div>
  <div id="log"></div>
</div>

<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>



<!-- LECTURE CONTENT -->
<div class="container mb-4">
  <div class="card mb-3" style="width: 100%;">
    <div class="row no-gutters">
      <div class="col-md-3">
        <div class="card-body" style="width: 100%;">
          <img style="height: 220px !important; width: 220px !important" src="https://images.unsplash.com/photo-1471970471555-19d4b113e9ed?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1400&q=80" class="card-img rounded-circle " alt="profile picture"!important >
        </div>
      </div>
      <div class="col-md-9">
        <div class="card-body">
          <h4>Upcoming Lesson</h4>
          <small class="text-white px-1 mb-5 rounded bg-info">confirmed</small>
          <h5 class="card-text mt-3">
            <i class="fas fa-clock mr-3 mb-3"></i><strong> Scheduled for:</strong> <%= @lecture.start_time.strftime('%I :%M %p' ' on ' '%A, %B %e') %></h5>
          <p class="card-title"><%= @lecture.message %></p>
          <div class="d-flex justify-content-between align-items-end">
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#linkToYoutube">Access Lesson</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="container">
  <div class="card mb-3" style="width: 100%;">
    <div class="row no-gutters">
      <div class="col-md-12">
        <div class="card-body" style="width: 100%;">
          <div class="form-wrapper" style="width: 100%; margin: 0 auto;">
            <%= simple_form_for :search, method: "get" do |f| %>
              <%= f.input :Comment, :as => :text %>
              <%= f.submit :Post, class: "btn btn-primary", id: "btn-link" %>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </div>



  <!-- Video JS -->
<script src="//media.twiliocdn.com/sdk/js/common/v0.1/twilio-common.min.js"></script>
<script src="//media.twiliocdn.com/sdk/js/video/releases/1.14.0/twilio-video.js"></script>
<script type="text/javascript">
  // EVERYTHING BELOW IS FOR VIDEO TEST

  'use strict';
//
  // var Video = require('twilio-video');

  var activeRoom;
  var previewTracks;
  var identity;
  var roomName;

  // Attach the Tracks to the DOM.
  function attachTracks(tracks, container) {
    tracks.forEach(function(track) {
      container.appendChild(track.attach());
    });
  }

  // Attach the Participant's Tracks to the DOM.
  function attachParticipantTracks(participant, container) {
    var tracks = Array.from(participant.tracks.values());
    attachTracks(tracks, container);
  }

  // Detach the Tracks from the DOM.
  function detachTracks(tracks) {
    tracks.forEach(function(track) {
      track.detach().forEach(function(detachedElement) {
        detachedElement.remove();
      });
    });
  }

  // Detach the Participant's Tracks from the DOM.
  function detachParticipantTracks(participant) {
    var tracks = Array.from(participant.tracks.values());
    detachTracks(tracks);
  }

  // When we are about to transition away from this page, disconnect
  // from the room, if joined.

  // // Obtain a token from the server in order to connect to the Room.
  // $.getJSON('/videotokens', function(data) {
  //   identity = data.identity;
  //   document.getElementById('room-controls').style.display = 'block';

  //   // Bind button to join Room.
  //   document.getElementById('button-join').onclick = function() {
  //     roomName = document.getElementById('room-name').value;
  //     if (!roomName) {
  //       alert('Please enter a room name.');
  //       return;
  //     }

  //     log("Joining room '" + roomName + "'...");
  //     var connectOptions = {
  //       name: roomName,
  //       logLevel: 'debug'
  //     };

  //     if (previewTracks) {
  //       connectOptions.tracks = previewTracks;
  //     }

  //     // Join the Room with the token from the server and the
  //     // LocalParticipant's Tracks.
  //     Video.connect(data.token, connectOptions).then(roomJoined, function(error) {
  //       log('Could not connect to Twilio: ' + error.message);
  //     });
  //   };

  //   // Bind button to leave Room.
  //   document.getElementById('button-leave').onclick = function() {
  //     log('Leaving room...');
  //     activeRoom.disconnect();
  //   };
  // });
    //  Local video preview
    document.getElementById('button-preview').onclick = function() {
      var localTracksPromise = previewTracks
      ? Promise.resolve(previewTracks)
      : Twilio.Video.createLocalTracks();

      localTracksPromise.then(function(tracks) {
        previewTracks = tracks;
        var previewContainer = document.getElementById('local-media');
        if (!previewContainer.querySelector('video')) {
          attachTracks(tracks, previewContainer);
        }
      }, function(error) {
        console.error('Unable to access local media', error);
        log('Unable to access Camera and Microphone');
      });
    };

    // Successfully connected!
    function roomJoined(room) {
      activeRoom = room;

      log("Joined as '" + identity + "'");
      document.getElementById('button-join').style.display = 'none';
      document.getElementById('button-leave').style.display = 'inline';

      // Draw local video, if not already previewing
      var previewContainer = document.getElementById('local-media');
      if (!previewContainer.querySelector('video')) {
        attachParticipantTracks(room.localParticipant, previewContainer);
      }

      room.participants.forEach(function(participant) {
        log("Already in Chat: '" + participant.identity + "'");
        var previewContainer = document.getElementById('remote-media');
        attachParticipantTracks(participant, previewContainer);
      });

      // When a participant joins, draw their video on screen
      room.on('participantConnected', function(participant) {
        log("Joining: '" + participant.identity + "'");
      });

      room.on('trackAdded', function(track, participant) {
        log(participant.identity + " added track: " + track.kind);
        var previewContainer = document.getElementById('remote-media');
        attachTracks([track], previewContainer);
      });

      room.on('trackRemoved', function(track, participant) {
        log(participant.identity + " removed track: " + track.kind);
        detachTracks([track]);
      });

      // When a participant disconnects, note in log
      room.on('participantDisconnected', function(participant) {
        log("Participant '" + participant.identity + "' left the room");
        detachParticipantTracks(participant);
      });

      // When we are disconnected, stop capturing local video
      // Also remove media for all remote participants
      room.on('disconnected', function() {
        log('Left');

        const roomSID = activeRoom.sid;
        // console.log(`....................${identity}`)
        // console.log(`....................${roomSID}`);
        // console.log(`....................${room.localParticipant.sid}`);

        detachParticipantTracks(room.localParticipant);
        room.participants.forEach(detachParticipantTracks);
        activeRoom = null;
        document.getElementById('button-join').style.display = 'inline';
        document.getElementById('button-leave').style.display = 'none';
        const mentorID = document.getElementsByClassName("chat")[0].id.split("A")[0];
      });
    }


    // Activity log
    function log(message) {
      var logDiv = document.getElementById('log');
      logDiv.innerHTML += '<p>&gt;&nbsp;' + message + '</p>';
      logDiv.scrollTop = logDiv.scrollHeight;
    }

    function leaveRoomIfJoined() {
      if (activeRoom) {
        activeRoom.disconnect();
      }
    }
</script>
